"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var firebase = require("nativescript-plugin-firebase");
var RecipeDAL = (function () {
    function RecipeDAL(DL) {
        this.DL = DL;
        this.PATH = "/recipe/items";
    }
    RecipeDAL.prototype.Load = function () {
        var _this = this;
        this.DL.Recipes = new Array();
        firebase.query(function (fb) {
            var item = fb.value;
            item.id = fb.key;
            _this.DL.ngZone.run(function () {
                var exists = _this.DL.Recipes.find(function (i) { return i.id == item.id; });
                if (exists == null)
                    _this.DL.Recipes.push(item);
                else {
                    _this.DL.Recipes = _this.DL.Recipes.filter(function (i) { return i.id != exists.id; });
                    _this.DL.Recipes.push(item);
                }
                _this.DL.Recipes.sort(function (item1, item2) { return item1.Name.localeCompare(item2.Name); });
            });
        }, this.PATH, { orderBy: {
                type: firebase.QueryOrderByType.CHILD,
                value: 'Name'
            }
        });
    };
    RecipeDAL.prototype.Save = function (item) {
        console.log("item: " + item.id + " " + item.Name + " " + item.Description);
        if (!item.id)
            firebase.push(this.PATH, item);
        else
            firebase.update(this.PATH + "/" + item.id, item);
    };
    return RecipeDAL;
}());
exports.RecipeDAL = RecipeDAL;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVjaXBlREFMLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUmVjaXBlREFMLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsdURBQTBEO0FBRTFEO0lBR0ksbUJBQW9CLEVBQWE7UUFBYixPQUFFLEdBQUYsRUFBRSxDQUFXO1FBRmpDLFNBQUksR0FBVyxlQUFlLENBQUM7SUFFTSxDQUFDO0lBRS9CLHdCQUFJLEdBQVg7UUFBQSxpQkF1QkM7UUF0QkcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxLQUFLLEVBQWMsQ0FBQztRQUMxQyxRQUFRLENBQUMsS0FBSyxDQUFDLFVBQUEsRUFBRTtZQUNULElBQUksSUFBSSxHQUFjLEVBQUUsQ0FBQyxLQUFLLENBQUM7WUFDL0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO1lBQ2pCLEtBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztnQkFDZixJQUFJLE1BQU0sR0FBRyxLQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQWYsQ0FBZSxDQUFDLENBQUM7Z0JBQ3hELEVBQUUsQ0FBQSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUM7b0JBQ2QsS0FBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO2dCQUM5QixJQUFJLENBQUMsQ0FBQztvQkFDRixLQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sR0FBRyxLQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsRUFBRSxJQUFJLE1BQU0sQ0FBQyxFQUFFLEVBQWpCLENBQWlCLENBQUMsQ0FBQTtvQkFDaEUsS0FBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMvQixDQUFDO2dCQUVELEtBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFDLEtBQUssRUFBRSxLQUFLLElBQUssT0FBQSxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQXBDLENBQW9DLENBQUMsQ0FBQztZQUNqRixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsRUFDRCxJQUFJLENBQUMsSUFBSSxFQUNMLEVBQUUsT0FBTyxFQUFFO2dCQUNYLElBQUksRUFBRSxRQUFRLENBQUMsZ0JBQWdCLENBQUMsS0FBSztnQkFDckMsS0FBSyxFQUFFLE1BQU07YUFDaEI7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sd0JBQUksR0FBWCxVQUFZLElBQWdCO1FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMzRSxFQUFFLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDUixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBSTtZQUNBLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBQ0wsZ0JBQUM7QUFBRCxDQUFDLEFBckNELElBcUNDO0FBckNZLDhCQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVjaXBlSW5mbywgRGF0YUxheWVyIH0gZnJvbSBcIi4uL1wiO1xuaW1wb3J0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XG5cbmV4cG9ydCBjbGFzcyBSZWNpcGVEQUwge1xuICAgIFBBVEg6IHN0cmluZyA9IFwiL3JlY2lwZS9pdGVtc1wiO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBETDogRGF0YUxheWVyKSB7IH1cblxuICAgIHB1YmxpYyBMb2FkKCkge1xuICAgICAgICB0aGlzLkRMLlJlY2lwZXMgPSBuZXcgQXJyYXk8UmVjaXBlSW5mbz4oKTtcbiAgICAgICAgZmlyZWJhc2UucXVlcnkoZmIgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBpdGVtOlJlY2lwZUluZm8gPSBmYi52YWx1ZTtcbiAgICAgICAgICAgICAgICBpdGVtLmlkID0gZmIua2V5O1xuICAgICAgICAgICAgICAgIHRoaXMuREwubmdab25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBleGlzdHMgPSB0aGlzLkRMLlJlY2lwZXMuZmluZChpID0+IGkuaWQgPT0gaXRlbS5pZCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKGV4aXN0cyA9PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ETC5SZWNpcGVzLnB1c2goaXRlbSlcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkRMLlJlY2lwZXMgPSB0aGlzLkRMLlJlY2lwZXMuZmlsdGVyKGkgPT4gaS5pZCAhPSBleGlzdHMuaWQpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkRMLlJlY2lwZXMucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuREwuUmVjaXBlcy5zb3J0KChpdGVtMSwgaXRlbTIpID0+IGl0ZW0xLk5hbWUubG9jYWxlQ29tcGFyZShpdGVtMi5OYW1lKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGhpcy5QQVRILFxuICAgICAgICAgICAgICAgIHsgb3JkZXJCeToge1xuICAgICAgICAgICAgICAgIHR5cGU6IGZpcmViYXNlLlF1ZXJ5T3JkZXJCeVR5cGUuQ0hJTEQsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICdOYW1lJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgU2F2ZShpdGVtOiBSZWNpcGVJbmZvKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiaXRlbTogXCIgKyBpdGVtLmlkICsgXCIgXCIgKyBpdGVtLk5hbWUgKyBcIiBcIiArIGl0ZW0uRGVzY3JpcHRpb24pO1xuICAgICAgICBpZighaXRlbS5pZClcbiAgICAgICAgICAgIGZpcmViYXNlLnB1c2godGhpcy5QQVRILCBpdGVtKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZmlyZWJhc2UudXBkYXRlKHRoaXMuUEFUSCArIFwiL1wiICsgaXRlbS5pZCwgaXRlbSk7XG4gICAgfVxufSJdfQ==