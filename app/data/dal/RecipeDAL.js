"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var firebase = require("nativescript-plugin-firebase");
var RecipeDAL = (function () {
    function RecipeDAL(DL) {
        this.DL = DL;
        this.PATH = "/recipe/items";
    }
    RecipeDAL.prototype.Load = function () {
        var _this = this;
        this.DL.Recipes = new Array();
        firebase.query(function (fb) {
            var item = fb.value;
            item.id = fb.key;
            _this.DL.ngZone.run(function () {
                var exists = _this.DL.Recipes.find(function (i) { return i.id == item.id; });
                if (exists == null)
                    _this.DL.Recipes.push(item);
                else {
                    _this.DL.Recipes = _this.DL.Recipes.filter(function (i) { return i.id != exists.id; });
                    _this.DL.Recipes.push(item);
                }
                _this.DL.Recipes.sort(function (item1, item2) { return item1.Name.localeCompare(item2.Name); });
            });
        }, this.PATH, { orderBy: {
                type: firebase.QueryOrderByType.CHILD,
                value: 'Name'
            }
        });
    };
    RecipeDAL.prototype.Save = function (item) {
        if (!item.id)
            firebase.push(this.PATH, item);
        else
            firebase.update(this.PATH + "/" + item.id, item);
    };
    return RecipeDAL;
}());
exports.RecipeDAL = RecipeDAL;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVjaXBlREFMLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUmVjaXBlREFMLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsdURBQTBEO0FBRTFEO0lBR0ksbUJBQW9CLEVBQWE7UUFBYixPQUFFLEdBQUYsRUFBRSxDQUFXO1FBRmpDLFNBQUksR0FBVyxlQUFlLENBQUM7SUFFTSxDQUFDO0lBRS9CLHdCQUFJLEdBQVg7UUFBQSxpQkF1QkM7UUF0QkcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxLQUFLLEVBQWMsQ0FBQztRQUMxQyxRQUFRLENBQUMsS0FBSyxDQUFDLFVBQUEsRUFBRTtZQUNULElBQUksSUFBSSxHQUFjLEVBQUUsQ0FBQyxLQUFLLENBQUM7WUFDL0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO1lBQ2pCLEtBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztnQkFDZixJQUFJLE1BQU0sR0FBRyxLQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQWYsQ0FBZSxDQUFDLENBQUM7Z0JBQ3hELEVBQUUsQ0FBQSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUM7b0JBQ2QsS0FBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO2dCQUM5QixJQUFJLENBQUMsQ0FBQztvQkFDRixLQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sR0FBRyxLQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsRUFBRSxJQUFJLE1BQU0sQ0FBQyxFQUFFLEVBQWpCLENBQWlCLENBQUMsQ0FBQTtvQkFDaEUsS0FBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUMvQixDQUFDO2dCQUVELEtBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFDLEtBQUssRUFBRSxLQUFLLElBQUssT0FBQSxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQXBDLENBQW9DLENBQUMsQ0FBQztZQUNqRixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsRUFDRCxJQUFJLENBQUMsSUFBSSxFQUNMLEVBQUUsT0FBTyxFQUFFO2dCQUNYLElBQUksRUFBRSxRQUFRLENBQUMsZ0JBQWdCLENBQUMsS0FBSztnQkFDckMsS0FBSyxFQUFFLE1BQU07YUFDaEI7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sd0JBQUksR0FBWCxVQUFZLElBQWdCO1FBQ3hCLEVBQUUsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUNSLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuQyxJQUFJO1lBQ0EsUUFBUSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFDTCxnQkFBQztBQUFELENBQUMsQUFwQ0QsSUFvQ0M7QUFwQ1ksOEJBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZWNpcGVJbmZvLCBEYXRhTGF5ZXIgfSBmcm9tIFwiLi4vXCI7XG5pbXBvcnQgZmlyZWJhc2UgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXBsdWdpbi1maXJlYmFzZVwiKTtcblxuZXhwb3J0IGNsYXNzIFJlY2lwZURBTCB7XG4gICAgUEFUSDogc3RyaW5nID0gXCIvcmVjaXBlL2l0ZW1zXCI7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIERMOiBEYXRhTGF5ZXIpIHsgfVxuXG4gICAgcHVibGljIExvYWQoKSB7XG4gICAgICAgIHRoaXMuREwuUmVjaXBlcyA9IG5ldyBBcnJheTxSZWNpcGVJbmZvPigpO1xuICAgICAgICBmaXJlYmFzZS5xdWVyeShmYiA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGl0ZW06UmVjaXBlSW5mbyA9IGZiLnZhbHVlO1xuICAgICAgICAgICAgICAgIGl0ZW0uaWQgPSBmYi5rZXk7XG4gICAgICAgICAgICAgICAgdGhpcy5ETC5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGV4aXN0cyA9IHRoaXMuREwuUmVjaXBlcy5maW5kKGkgPT4gaS5pZCA9PSBpdGVtLmlkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYoZXhpc3RzID09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkRMLlJlY2lwZXMucHVzaChpdGVtKVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuREwuUmVjaXBlcyA9IHRoaXMuREwuUmVjaXBlcy5maWx0ZXIoaSA9PiBpLmlkICE9IGV4aXN0cy5pZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuREwuUmVjaXBlcy5wdXNoKGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ETC5SZWNpcGVzLnNvcnQoKGl0ZW0xLCBpdGVtMikgPT4gaXRlbTEuTmFtZS5sb2NhbGVDb21wYXJlKGl0ZW0yLk5hbWUpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aGlzLlBBVEgsXG4gICAgICAgICAgICAgICAgeyBvcmRlckJ5OiB7XG4gICAgICAgICAgICAgICAgdHlwZTogZmlyZWJhc2UuUXVlcnlPcmRlckJ5VHlwZS5DSElMRCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogJ05hbWUnXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBTYXZlKGl0ZW06IFJlY2lwZUluZm8pIHtcbiAgICAgICAgaWYoIWl0ZW0uaWQpXG4gICAgICAgICAgICBmaXJlYmFzZS5wdXNoKHRoaXMuUEFUSCwgaXRlbSk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGZpcmViYXNlLnVwZGF0ZSh0aGlzLlBBVEggKyBcIi9cIiArIGl0ZW0uaWQsIGl0ZW0pO1xuICAgIH1cbn0iXX0=