"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var firebase = require("nativescript-plugin-firebase");
var RecipeDAL = (function () {
    function RecipeDAL(DL) {
        this.DL = DL;
        this.PATH = "/recipe/items";
    }
    RecipeDAL.prototype.Load = function () {
        var _this = this;
        this.DL.Recipes = new Array();
        firebase.query(function (fb) {
            var item = fb.value;
            item.id = fb.key;
            console.log("Item: " + item.id);
            _this.DL.ngZone.run(function () {
                var exists = _this.DL.Recipes.find(function (i) { return i.id == item.id; });
                if (exists == null)
                    _this.DL.Recipes.push(item);
                else {
                    _this.DL.Recipes = _this.DL.Recipes.filter(function (i) { return i.id != exists.id; });
                    _this.DL.Recipes.push(item);
                }
                _this.DL.Recipes.sort(function (item1, item2) { return item1.Name.localeCompare(item2.Name); });
            });
        }, this.PATH, { orderBy: {
                type: firebase.QueryOrderByType.CHILD,
                value: 'Name'
            }
        });
    };
    RecipeDAL.prototype.Save = function (item) {
        if (!item.id)
            firebase.push(this.PATH, item);
        else
            firebase.update(this.PATH + "/" + item.id, item);
    };
    return RecipeDAL;
}());
exports.RecipeDAL = RecipeDAL;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVjaXBlREFMLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUmVjaXBlREFMLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsdURBQTBEO0FBRTFEO0lBR0ksbUJBQW9CLEVBQWE7UUFBYixPQUFFLEdBQUYsRUFBRSxDQUFXO1FBRmpDLFNBQUksR0FBVyxlQUFlLENBQUM7SUFFTSxDQUFDO0lBRS9CLHdCQUFJLEdBQVg7UUFBQSxpQkF3QkM7UUF2QkcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxLQUFLLEVBQWMsQ0FBQztRQUMxQyxRQUFRLENBQUMsS0FBSyxDQUFDLFVBQUEsRUFBRTtZQUNiLElBQUksSUFBSSxHQUFjLEVBQUUsQ0FBQyxLQUFLLENBQUM7WUFDL0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO1lBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNoQyxLQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7Z0JBQ2YsSUFBSSxNQUFNLEdBQUcsS0FBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxJQUFJLENBQUMsRUFBRSxFQUFmLENBQWUsQ0FBQyxDQUFDO2dCQUN4RCxFQUFFLENBQUEsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDO29CQUNkLEtBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtnQkFDOUIsSUFBSSxDQUFDLENBQUM7b0JBQ0YsS0FBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEdBQUcsS0FBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxNQUFNLENBQUMsRUFBRSxFQUFqQixDQUFpQixDQUFDLENBQUE7b0JBQ2hFLEtBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDL0IsQ0FBQztnQkFFRCxLQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBQyxLQUFLLEVBQUUsS0FBSyxJQUFLLE9BQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFwQyxDQUFvQyxDQUFDLENBQUM7WUFDakYsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLEVBQ0QsSUFBSSxDQUFDLElBQUksRUFDTCxFQUFFLE9BQU8sRUFBRTtnQkFDUCxJQUFJLEVBQUUsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEtBQUs7Z0JBQ3JDLEtBQUssRUFBRSxNQUFNO2FBQ2hCO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLHdCQUFJLEdBQVgsVUFBWSxJQUFnQjtRQUN4QixFQUFFLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDUixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBSTtZQUNBLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBQ0wsZ0JBQUM7QUFBRCxDQUFDLEFBckNELElBcUNDO0FBckNZLDhCQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVjaXBlSW5mbywgRGF0YUxheWVyIH0gZnJvbSBcIi4uL1wiO1xuaW1wb3J0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XG5cbmV4cG9ydCBjbGFzcyBSZWNpcGVEQUwge1xuICAgIFBBVEg6IHN0cmluZyA9IFwiL3JlY2lwZS9pdGVtc1wiO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBETDogRGF0YUxheWVyKSB7IH1cblxuICAgIHB1YmxpYyBMb2FkKCkge1xuICAgICAgICB0aGlzLkRMLlJlY2lwZXMgPSBuZXcgQXJyYXk8UmVjaXBlSW5mbz4oKTtcbiAgICAgICAgZmlyZWJhc2UucXVlcnkoZmIgPT4ge1xuICAgICAgICAgICAgbGV0IGl0ZW06UmVjaXBlSW5mbyA9IGZiLnZhbHVlO1xuICAgICAgICAgICAgaXRlbS5pZCA9IGZiLmtleTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSXRlbTogXCIgKyBpdGVtLmlkKTtcbiAgICAgICAgICAgIHRoaXMuREwubmdab25lLnJ1bigoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGV4aXN0cyA9IHRoaXMuREwuUmVjaXBlcy5maW5kKGkgPT4gaS5pZCA9PSBpdGVtLmlkKTtcbiAgICAgICAgICAgICAgICBpZihleGlzdHMgPT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ETC5SZWNpcGVzLnB1c2goaXRlbSlcbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ETC5SZWNpcGVzID0gdGhpcy5ETC5SZWNpcGVzLmZpbHRlcihpID0+IGkuaWQgIT0gZXhpc3RzLmlkKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLkRMLlJlY2lwZXMucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLkRMLlJlY2lwZXMuc29ydCgoaXRlbTEsIGl0ZW0yKSA9PiBpdGVtMS5OYW1lLmxvY2FsZUNvbXBhcmUoaXRlbTIuTmFtZSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuUEFUSCxcbiAgICAgICAgICAgIHsgb3JkZXJCeToge1xuICAgICAgICAgICAgICAgIHR5cGU6IGZpcmViYXNlLlF1ZXJ5T3JkZXJCeVR5cGUuQ0hJTEQsXG4gICAgICAgICAgICAgICAgdmFsdWU6ICdOYW1lJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgU2F2ZShpdGVtOiBSZWNpcGVJbmZvKSB7XG4gICAgICAgIGlmKCFpdGVtLmlkKVxuICAgICAgICAgICAgZmlyZWJhc2UucHVzaCh0aGlzLlBBVEgsIGl0ZW0pO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBmaXJlYmFzZS51cGRhdGUodGhpcy5QQVRIICsgXCIvXCIgKyBpdGVtLmlkLCBpdGVtKTtcbiAgICB9XG59Il19