"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var firebase = require("nativescript-plugin-firebase");
var RecipeDAL = (function () {
    function RecipeDAL(DL) {
        this.DL = DL;
        this.PATH = "/recipe/items";
    }
    RecipeDAL.prototype.Load = function () {
        var _this = this;
        this.DL.Recipes = new Array();
        firebase.query(function (fb) {
            var item = fb.value;
            item.id = fb.key;
            _this.DL.ngZone.run(function () {
                var exists = _this.DL.Recipes.find(function (i) { return i.id == item.id; });
                if (exists == null)
                    _this.DL.Recipes.push(item);
                else
                    exists.Name = item.Name;
            });
        }, this.PATH, { orderBy: {
                type: firebase.QueryOrderByType.CHILD,
                value: 'Name'
            }
        });
    };
    RecipeDAL.prototype.Save = function (item) {
        console.log("item: " + item.id + " " + item.Name);
        if (!item.id)
            firebase.push(this.PATH, item);
        else
            firebase.update(this.PATH + "/" + item.id, item);
    };
    return RecipeDAL;
}());
exports.RecipeDAL = RecipeDAL;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVjaXBlREFMLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUmVjaXBlREFMLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsdURBQTBEO0FBRTFEO0lBR0ksbUJBQW9CLEVBQWE7UUFBYixPQUFFLEdBQUYsRUFBRSxDQUFXO1FBRmpDLFNBQUksR0FBVyxlQUFlLENBQUM7SUFFTSxDQUFDO0lBRS9CLHdCQUFJLEdBQVg7UUFBQSxpQkFtQkM7UUFsQkcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxLQUFLLEVBQWMsQ0FBQztRQUMxQyxRQUFRLENBQUMsS0FBSyxDQUFDLFVBQUEsRUFBRTtZQUNULElBQUksSUFBSSxHQUFjLEVBQUUsQ0FBQyxLQUFLLENBQUM7WUFDL0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDO1lBQ2pCLEtBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztnQkFDZixJQUFJLE1BQU0sR0FBRyxLQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQWYsQ0FBZSxDQUFDLENBQUM7Z0JBQ3hELEVBQUUsQ0FBQSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUM7b0JBQ2QsS0FBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO2dCQUM5QixJQUFJO29CQUNBLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNoQyxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsRUFDRCxJQUFJLENBQUMsSUFBSSxFQUNMLEVBQUUsT0FBTyxFQUFFO2dCQUNYLElBQUksRUFBRSxRQUFRLENBQUMsZ0JBQWdCLENBQUMsS0FBSztnQkFDckMsS0FBSyxFQUFFLE1BQU07YUFDaEI7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sd0JBQUksR0FBWCxVQUFZLElBQWdCO1FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRCxFQUFFLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7WUFDUixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkMsSUFBSTtZQUNBLFFBQVEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBQ0wsZ0JBQUM7QUFBRCxDQUFDLEFBakNELElBaUNDO0FBakNZLDhCQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVjaXBlSW5mbywgRGF0YUxheWVyIH0gZnJvbSBcIi4uL1wiO1xyXG5pbXBvcnQgZmlyZWJhc2UgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXBsdWdpbi1maXJlYmFzZVwiKTtcclxuXHJcbmV4cG9ydCBjbGFzcyBSZWNpcGVEQUwge1xyXG4gICAgUEFUSDogc3RyaW5nID0gXCIvcmVjaXBlL2l0ZW1zXCI7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBETDogRGF0YUxheWVyKSB7IH1cclxuXHJcbiAgICBwdWJsaWMgTG9hZCgpIHtcclxuICAgICAgICB0aGlzLkRMLlJlY2lwZXMgPSBuZXcgQXJyYXk8UmVjaXBlSW5mbz4oKTtcclxuICAgICAgICBmaXJlYmFzZS5xdWVyeShmYiA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXRlbTpSZWNpcGVJbmZvID0gZmIudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBpdGVtLmlkID0gZmIua2V5O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ETC5uZ1pvbmUucnVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZXhpc3RzID0gdGhpcy5ETC5SZWNpcGVzLmZpbmQoaSA9PiBpLmlkID09IGl0ZW0uaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmKGV4aXN0cyA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLkRMLlJlY2lwZXMucHVzaChpdGVtKVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RzLk5hbWUgPSBpdGVtLk5hbWU7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGhpcy5QQVRILFxyXG4gICAgICAgICAgICAgICAgeyBvcmRlckJ5OiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBmaXJlYmFzZS5RdWVyeU9yZGVyQnlUeXBlLkNISUxELFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6ICdOYW1lJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIFNhdmUoaXRlbTogUmVjaXBlSW5mbykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiaXRlbTogXCIgKyBpdGVtLmlkICsgXCIgXCIgKyBpdGVtLk5hbWUpO1xyXG4gICAgICAgIGlmKCFpdGVtLmlkKVxyXG4gICAgICAgICAgICBmaXJlYmFzZS5wdXNoKHRoaXMuUEFUSCwgaXRlbSk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBmaXJlYmFzZS51cGRhdGUodGhpcy5QQVRIICsgXCIvXCIgKyBpdGVtLmlkLCBpdGVtKTtcclxuICAgIH1cclxufSJdfQ==